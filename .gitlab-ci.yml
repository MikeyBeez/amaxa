stages:
  - test
  - deploy

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache"

test-unit:
  image: circleci/python:3.8
  stage: test
  cache:
    paths:
      - .tox
      - .cache/pip
      - venv/
    key:
      files:
        - poetry.lock
  before_script:
    - python -V
    - python -m venv venv
    - . venv/bin/activate
    - pip install --upgrade pip
    - pip install poetry
    - poetry install --no-root
  script:
    - poetry run pre-commit run --all
    - tox test/test_unit
    - codecov -F unit
  artifacts:
    reports:
      junit: test-reports/junit-*.xml
  only:
    - branches

test-integration:
  image: circleci/python:3.8-node
  stage: test
  cache:
    paths:
      - .tox
      - .cache/pip
      - venv/
      - node_modules/
    key:
      files:
        - poetry.lock
  before_script:
    - python -V
    - python -m venv venv
    - . venv/bin/activate
    - pip install --upgrade pip
    - pip install poetry
    - poetry install --no-root
    - if [ ! -d node_modules/sfdx-cli ]; then
          export SFDX_AUTOUPDATE_DISABLE=true;
          export SFDX_USE_GENERIC_UNIX_KEYCHAIN=true;
          export SFDX_DOMAIN_RETRY=300;
          npm install sfdx-cli;
      fi;
  script:
    - sudo ln -s $(pwd)/node_modules/sfdx-cli/bin/run /usr/local/bin/sfdx;
    - sfdx --version
    - openssl aes-256-cbc -k $KEY -in assets/server.key.enc -out assets/server.key -d -md sha256
    - sfdx force:auth:jwt:grant --clientid $CONSUMERKEY --jwtkeyfile assets/server.key --username $USERNAME --setdefaultdevhubusername -a DevHub
    - source assets/scripts/prep-scratch-org.sh
    - tox test/test_org
    - codecov -F integration
  after_script:
    - sfdx force:org:delete -u amaxa -p
    - rm assets/server.key
  artifacts:
    reports:
      junit: test-reports/junit-*.xml
  only:
    - branches
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /org skip/i

upload_package:
  stage: deploy
  when: manual
  image: python:3.8-slim
  before_script:
    - python -V
    - python -m venv venv
    - source venv/bin/activate
    - pip install --upgrade pip
    - pip install poetry
  script:
    - poetry publish --build -u "$PYPI_PRODUCTION_USERNAME" -p "$PYPI_PRODUCTION_PASSWORD"
  only:
    - tags
